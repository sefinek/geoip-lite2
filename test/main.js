const assert=require("assert"),geoIp2=require("../lib/geoip.js");describe("GeoIP2",(function(){describe("#testLookup()",(function(){it("should return data about IPv4",(function(){const t=geoIp2.lookup("1.1.1.1");assert.ok(t)})),it("should return data about IPv6",(function(){const t=geoIp2.lookup("2606:4700:4700::64");assert.ok(t)}))})),describe("#testDataIP4()",(function(){it("should match data for IPv4 - US",(function(){const t=geoIp2.lookup("72.229.28.185");assert.strictEqual(void 0!==t.range,!0),assert.strictEqual(t.country,"US"),assert.strictEqual(t.region,"NY"),assert.strictEqual(t.eu,"0"),assert.strictEqual(t.timezone,"America/New_York"),assert.strictEqual(t.city,"New York"),assert.ok(t.ll),assert.strictEqual(t.metro,501),assert.strictEqual(t.area,5)})),it("should match data for IPv4 - JP",(function(){const t=geoIp2.lookup("210.138.184.59");assert.strictEqual(void 0!==t.range,!0),assert.strictEqual(t.country,"JP"),assert.strictEqual(t.region,"13"),assert.strictEqual(t.eu,"0"),assert.strictEqual(t.timezone,"Asia/Tokyo"),assert.strictEqual(t.city,"Chiyoda-ku"),assert.ok(t.ll),assert.strictEqual(t.metro,0),assert.strictEqual(t.area,200)})),it("should match data for IPv4 - PL",(function(){const t=geoIp2.lookup("104.113.255.255");assert.strictEqual(void 0!==t.range,!0),assert.strictEqual(t.country,"PL"),assert.strictEqual(t.region,"14"),assert.strictEqual(t.eu,"1"),assert.strictEqual(t.timezone,"Europe/Warsaw"),assert.strictEqual(t.city,"Warsaw"),assert.ok(t.ll),assert.strictEqual(t.metro,0),assert.strictEqual(t.area,20)})),it("should match data for IPv4 - RU",(function(){const t=geoIp2.lookup("109.108.63.255");assert.strictEqual(void 0!==t.range,!0),assert.strictEqual(t.country,"RU"),assert.strictEqual(t.region,"IVA"),assert.strictEqual(t.eu,"0"),assert.strictEqual(t.timezone,"Europe/Moscow"),assert.strictEqual(t.city,"Kineshma"),assert.ok(t.ll),assert.strictEqual(t.metro,0),assert.strictEqual(t.area,200)}))})),describe("#testDataIP6()",(function(){it("should match data for IPv6",(function(){const t=geoIp2.lookup("2001:1c04:400::1");assert.strictEqual(void 0!==t.range,!0),assert.strictEqual(t.country,"NL"),assert.strictEqual(t.region,"NH"),assert.strictEqual(t.eu,"1"),assert.strictEqual(t.timezone,"Europe/Amsterdam"),assert.strictEqual(t.city,"Zandvoort"),assert.ok(t.ll),assert.strictEqual(t.metro,0),assert.strictEqual(t.area,5)})),it("should match data for IPv4 - JP",(function(){const t=geoIp2.lookup("2400:8500:1302:814:a163:44:173:238f");assert.strictEqual(void 0!==t.range,!0),assert.strictEqual(t.country,"JP"),assert.strictEqual(t.region,""),assert.strictEqual(t.eu,"0"),assert.strictEqual(t.timezone,"Asia/Tokyo"),assert.strictEqual(t.city,""),assert.ok(t.ll),assert.strictEqual(t.metro,0),assert.strictEqual(t.area,500)})),it("should match data for IPv4 - JP",(function(){const t=geoIp2.lookup("1.79.255.115");assert.strictEqual(void 0!==t.range,!0),assert.strictEqual(t.country,"JP"),assert.strictEqual(t.region,""),assert.strictEqual(t.eu,"0"),assert.strictEqual(t.timezone,"Asia/Tokyo"),assert.strictEqual(t.city,""),assert.ok(t.ll),assert.strictEqual(t.metro,0),assert.strictEqual(t.area,500)}))})),describe("#testUTF8()",(function(){it("should return UTF8 city name",(function(){const t=geoIp2.lookup("2.139.175.1");assert.ok(t),assert.strictEqual(t.city,"Barbera Del Valles")}))})),describe("#testMetro()",(function(){it("should match metro data",(function(){const t=geoIp2.lookup("23.240.63.68");assert.strictEqual(t.metro,803)}))})),describe("#testIPv4MappedIPv6()",(function(){it("should match IPv4 mapped IPv6 data",(function(){const t=geoIp2.lookup("195.16.170.74");assert.strictEqual(t.metro,0)}))})),describe("#testSyncReload()",(function(){it("should reload data synchronously",(function(){const t=geoIp2.lookup("75.82.117.180");assert.notStrictEqual(t,null);const s=geoIp2.lookup("::ffff:173.185.182.82");assert.notStrictEqual(s,null),geoIp2.clear();const r=geoIp2.lookup("75.82.117.180");assert.strictEqual(r,null);const a=geoIp2.lookup("::ffff:173.185.182.82");assert.strictEqual(a,null),geoIp2.reloadDataSync();const o=geoIp2.lookup("75.82.117.180");assert.deepStrictEqual(t,o);const e=geoIp2.lookup("::ffff:173.185.182.82");assert.deepStrictEqual(s,e)}))})),describe("#testAsyncReload()",(function(){it("should reload data asynchronously",(function(t){const s=geoIp2.lookup("75.82.117.180");assert.notStrictEqual(s,null);const r=geoIp2.lookup("::ffff:173.185.182.82");assert.notStrictEqual(r,null),geoIp2.clear();const a=geoIp2.lookup("75.82.117.180");assert.strictEqual(a,null);const o=geoIp2.lookup("::ffff:173.185.182.82");assert.strictEqual(o,null),geoIp2.reloadData((function(){const a=geoIp2.lookup("75.82.117.180");assert.deepStrictEqual(s,a);const o=geoIp2.lookup("::ffff:173.185.182.82");assert.deepStrictEqual(r,o),t()}))}))})),describe("#testInvalidIP()",(function(){it("should return null for an invalid IP address",(function(){const t=geoIp2.lookup("invalid_ip_address");assert.strictEqual(t,null)}))})),describe("#testEmptyIP()",(function(){it("should return null for an empty IP address",(function(){const t=geoIp2.lookup("");assert.strictEqual(t,null)}))})),describe("#testNullIP()",(function(){it("should return null for a null IP address",(function(){const t=geoIp2.lookup(null);assert.strictEqual(t,null)}))})),describe("#testUnknownIP()",(function(){it("should return null for an unknown IP address",(function(){const t=geoIp2.lookup("192.168.1.1");assert.strictEqual(t,null)}))})),describe("#testNoDataForIP()",(function(){it("should return null for an IP address with no data",(function(){const t=geoIp2.lookup("203.0.113.0");assert.strictEqual(t,null)}))})),describe("#testSpecialCharactersIP()",(function(){it("should return null for an IP address with special characters",(function(){const t=geoIp2.lookup("1.2.3.@");assert.strictEqual(t,null)}))}))}));