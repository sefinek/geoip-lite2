const assert=require("assert");const t1=+new Date;const geoIp2=require("../lib/geoip.js");const t2=+new Date;if(process.argv.length>2){console.dir(geoIp2.lookup(process.argv[2]));const t3=+new Date;console.log("Startup: %dms, exec: %dms",t2-t1,t3-t2);process.exit(1)}const f=[];let ip;const n=3e4;const nf=[];let r;const ts=+new Date;for(let i=0;i<n;i++){if(i%2===0){ip=Math.round(Math.random()*4278190080+16777215)}else{ip="2001:"+Math.round(Math.random()*65535).toString(16)+":"+Math.round(Math.random()*65535).toString(16)+":"+Math.round(Math.random()*65535).toString(16)+":"+Math.round(Math.random()*65535).toString(16)+":"+Math.round(Math.random()*65535).toString(16)+":"+Math.round(Math.random()*65535).toString(16)+":"+Math.round(Math.random()*65535).toString(16)+""}r=geoIp2.lookup(ip);if(r===null){nf.push(ip);continue}f.push([ip,r]);assert.ok(geoIp2.cmp(ip,r.range[0])>=0,"Problem with "+geoIp2.pretty(ip)+" < "+geoIp2.pretty(r.range[0]));assert.ok(geoIp2.cmp(ip,r.range[1])<=0,"Problem with "+geoIp2.pretty(ip)+" > "+geoIp2.pretty(r.range[1]))}const te=+new Date;console.log("Found %d (%d/%d) ips in %dms (%s ip/s) (%sÎ¼s/ip)",n,f.length,nf.length,te-ts,(n*1e3/(te-ts)).toFixed(3),((te-ts)*1e3/n).toFixed(0));console.log("Took %d ms to startup",t2-t1);