const assert=require("assert"),t1=+new Date,geoIp2=require("../lib/geoip.js"),t2=+new Date;if(process.argv.length>2){console.dir(geoIp2.lookup(process.argv[2]));const t=+new Date;console.log("Startup: %dms, exec: %dms",t2-t1,t-t2),process.exit(1)}const f=[];let ip;const n=3e4,nf=[];let r;const ts=+new Date;for(let t=0;t<n;t++)ip=t%2==0?Math.round(4278190080*Math.random()+16777215):"2001:"+Math.round(65535*Math.random()).toString(16)+":"+Math.round(65535*Math.random()).toString(16)+":"+Math.round(65535*Math.random()).toString(16)+":"+Math.round(65535*Math.random()).toString(16)+":"+Math.round(65535*Math.random()).toString(16)+":"+Math.round(65535*Math.random()).toString(16)+":"+Math.round(65535*Math.random()).toString(16),r=geoIp2.lookup(ip),null!==r?(f.push([ip,r]),assert.ok(geoIp2.cmp(ip,r.range[0])>=0,"Problem with "+geoIp2.pretty(ip)+" < "+geoIp2.pretty(r.range[0])),assert.ok(geoIp2.cmp(ip,r.range[1])<=0,"Problem with "+geoIp2.pretty(ip)+" > "+geoIp2.pretty(r.range[1]))):nf.push(ip);const te=+new Date;console.log("Found %d (%d/%d) ips in %dms (%s ip/s) (%sÎ¼s/ip)",n,f.length,nf.length,te-ts,(1e3*n/(te-ts)).toFixed(3),(1e3*(te-ts)/n).toFixed(0)),console.log("Took %d ms to startup",t2-t1);